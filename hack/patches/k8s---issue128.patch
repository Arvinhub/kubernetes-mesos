diff --git a/pkg/kubelet/kubelet.go b/pkg/kubelet/kubelet.go
index 3ab5845..632f611 100644
--- a/pkg/kubelet/kubelet.go
+++ b/pkg/kubelet/kubelet.go
@@ -1192,3 +1192,7 @@ func (kl *Kubelet) BirthCry() {
 	}
 	record.Eventf(ref, "", "starting", "Starting kubelet.")
 }
+
+func (kl *Kubelet) ListenAndServe(address net.IP, port uint, enableDebuggingHandlers bool) {
+	ListenAndServeKubeletServer(kl, address, port, enableDebuggingHandlers)
+}
diff --git a/pkg/kubelet/util.go b/pkg/kubelet/util.go
index cc6aa58..dc3043d 100644
--- a/pkg/kubelet/util.go
+++ b/pkg/kubelet/util.go
@@ -35,8 +35,7 @@ import (
 	cadvisor "github.com/google/cadvisor/client"
 )
 
-// TODO: move this into the kubelet itself
-func MonitorCAdvisor(k *Kubelet, cp uint) {
+func (kl *Kubelet) MonitorCAdvisor(cp uint) {
 	defer util.HandleCrash()
 	// TODO: Monitor this connection, reconnect if needed?
 	glog.V(1).Infof("Trying to create cadvisor client.")
@@ -46,14 +45,13 @@ func MonitorCAdvisor(k *Kubelet, cp uint) {
 		return
 	}
 	glog.V(1).Infof("Successfully created cadvisor client.")
-	k.SetCadvisorClient(cadvisorClient)
+	kl.SetCadvisorClient(cadvisorClient)
 }
 
-// TODO: move this into the kubelet itself
-func InitHealthChecking(k *Kubelet) {
+func (kl *Kubelet) InitHealthChecking() {
 	// TODO: These should probably become more plugin-ish: register a factory func
 	// in each checker's init(), iterate those here.
-	health.AddHealthChecker(health.NewExecHealthChecker(k))
+	health.AddHealthChecker(health.NewExecHealthChecker(kl))
 	health.AddHealthChecker(health.NewHTTPHealthChecker(&http.Client{}))
 	health.AddHealthChecker(&health.TCPHealthChecker{})
 }
diff --git a/pkg/standalone/standalone.go b/pkg/standalone/standalone.go
index b9af29a..76846bd 100644
--- a/pkg/standalone/standalone.go
+++ b/pkg/standalone/standalone.go
@@ -143,16 +143,29 @@ func SimpleRunKubelet(etcdClient tools.EtcdClient, dockerClient dockertools.Dock
 		EnableDebuggingHandlers: true,
 		SyncFrequency:           3 * time.Second,
 	}
-	RunKubelet(&kcfg)
+	RunKubelet(&kcfg, nil)
 }
 
+// bootstrapping interface for kubelet, targets the initialization protocol
+type KubeletBootstrap interface {
+	BirthCry()
+	GarbageCollectLoop()
+	InitHealthChecking()
+	ListenAndServe(net.IP, uint, bool)
+	MonitorCAdvisor(uint)
+	Run(<-chan kubelet.PodUpdate)
+	RunOnce(<-chan kubelet.PodUpdate) ([]kubelet.RunPodResult, error)
+}
+
+// create and initialize a Kubelet instance
+type KubeletBuilder func(kc *KubeletConfig) (KubeletBootstrap, *config.PodConfig)
+
 // RunKubelet is responsible for setting up and running a kubelet.  It is used in three different applications:
 //   1 Integration tests
 //   2 Kubelet binary
 //   3 Standalone 'kubernetes' binary
 // Eventually, #2 will be replaced with instances of #3
-func RunKubelet(kcfg *KubeletConfig) {
-	kubelet.SetupEventSending(kcfg.AuthPath, kcfg.ApiServerList)
+func RunKubelet(kcfg *KubeletConfig, builder KubeletBuilder) {
 	kubelet.SetupLogging()
 	kubelet.SetupCapabilities(kcfg.AllowPrivileged)
 
@@ -161,8 +174,10 @@ func RunKubelet(kcfg *KubeletConfig) {
 		kubelet.SetupRootDirectoryOrDie(kcfg.RootDirectory)
 	}
 
-	cfg := makePodSourceConfig(kcfg)
-	k := createAndInitKubelet(kcfg, cfg)
+	if builder == nil {
+		builder = createAndInitKubelet
+	}
+	k, cfg := builder(kcfg)
 	// process pods and exit.
 	if kcfg.Runonce {
 		if _, err := k.RunOnce(cfg.Updates()); err != nil {
@@ -173,15 +188,15 @@ func RunKubelet(kcfg *KubeletConfig) {
 	}
 }
 
-func startKubelet(k *kubelet.Kubelet, cfg *config.PodConfig, kc *KubeletConfig) {
+func startKubelet(k KubeletBootstrap, cfg *config.PodConfig, kc *KubeletConfig) {
 	// start the kubelet
 	go util.Forever(func() { k.Run(cfg.Updates()) }, 0)
 
 	// start the kubelet server
 	if kc.EnableServer {
 		go util.Forever(func() {
-			kubelet.ListenAndServeKubeletServer(k, net.IP(kc.Address), kc.Port, kc.EnableDebuggingHandlers)
-		}, 0)
+			k.ListenAndServe(net.IP(kc.Address), kc.Port, kc.EnableDebuggingHandlers)
+		}, 10*time.Second)
 	}
 }
 
@@ -237,11 +252,15 @@ type KubeletConfig struct {
 	Runonce                 bool
 }
 
-func createAndInitKubelet(kc *KubeletConfig, pc *config.PodConfig) *kubelet.Kubelet {
+func createAndInitKubelet(kc *KubeletConfig) (k KubeletBootstrap, pc *config.PodConfig) {
+
+	kubelet.SetupEventSending(kc.AuthPath, kc.ApiServerList)
+	pc = makePodSourceConfig(kc)
+
 	// TODO: block until all sources have delivered at least one update to the channel, or break the sync loop
 	// up into "per source" synchronizations
 
-	k := kubelet.NewMainKubelet(
+	k = kubelet.NewMainKubelet(
 		kc.Hostname,
 		kc.DockerClient,
 		kc.EtcdClient,
@@ -259,8 +278,8 @@ func createAndInitKubelet(kc *KubeletConfig, pc *config.PodConfig) *kubelet.Kube
 	k.BirthCry()
 
 	go k.GarbageCollectLoop()
-	go kubelet.MonitorCAdvisor(k, kc.CAdvisorPort)
-	kubelet.InitHealthChecking(k)
+	go k.MonitorCAdvisor(kc.CAdvisorPort)
+	k.InitHealthChecking()
 
-	return k
+	return
 }
